?start: _NL* _value
_value : [MAPPING_TYPE] uon_mapping | [SEQUENCE_TYPE] uon_seq
uon_mapping: yaml_mapping | json_mapping
uon_seq: yaml_seq | json_seq

// yaml structure
yaml_seq: seq_item+
yaml_mapping : pair+
yaml_collection: [MAPPING_TYPE] yaml_mapping | [SEQUENCE_TYPE] yaml_seq
pair: pair_key ":" yaml_value
seq_item : "-" yaml_value
yaml_collection_nested: _NL [_INDENT yaml_collection _DEDENT]
yaml_value: scalar _NL+ | yaml_collection_nested

// json structure
json_mapping : "{" [json_pair ("," json_pair)*] "}"
json_pair: pair_key ":" json_value
json_seq : "[" [json_value ("," json_value)*] "]"
json_collection: [MAPPING_TYPE] json_mapping | [SEQUENCE_TYPE] json_seq
json_value: json_collection | scalar

// TODO: fix null, true/false values in transformer
scalar : (typed_scalar | _scalar_value)
typed_scalar : scalar_type  (typed_scalar | _scalar_value)
_scalar_value : (escaped_string | string | number)

pair_key : (string | escaped_string) [presentation_properties]
presentation_properties : "(" [_presentation_property ("," _presentation_property)*] ")"
_presentation_property : optional | description
description: "description" ":" (string | escaped_string)
optional : "optional" ":" _boolean_value

boolean: [BOOL_TYPE] _boolean_value
_boolean_value: true | false
true : "true" | "True"
false : "false" | "False"
// TODO: import escaped string perhaps
escaped_string : "\"" WORD+ "\"" | "'" WORD+ "'"
string :  number WORD+ | WORD+
number : DECIMAL | FLOAT_NUMBER | SIGNED_NUMBER
DECIMAL.2 : /0|[1-9]\d*/i
FLOAT_NUMBER.2: /((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/i


// TODO: Fix strings that may begin with "!!" if none of the types below matched
// https://www.regextester.com/95226

// Collections types
collection_type : MAPPING_TYPE | SEQUENCE_TYPE
MAPPING_TYPE: "!mapping"
SEQUENCE_TYPE: "!seq"

// Scalar types
scalar_type : STR_TYPE | FLOAT_128_TYPE | FLOAT_64_TYPE | FLOAT_32_TYPE
               | INT_128_TYPE | INT_64_TYPE | INT_32_TYPE
               | UINT_128_TYPE | UINT_64_TYPE | UINT_32_TYPE

STR_TYPE: "!str"
BOOL_TYPE: "!bool"

FLOAT_128_TYPE: "!float128"
FLOAT_64_TYPE: "!float64"
FLOAT_32_TYPE: "!float32"

INT_128_TYPE: "!int128"
INT_64_TYPE: "!int64"
INT_32_TYPE: "!int32"

UINT_128_TYPE: "!uint128"
UINT_64_TYPE: "!uint64"
UINT_32_TYPE: "!uint32"

// TODO: folded style strings?
// Priority 2
WORD:  /[^:#,()\[\]{}\n\"\'\s]+/
COMMENT: /#[^\n]*/
%import common.SIGNED_NUMBER
%import common.WS_INLINE
%declare _INDENT _DEDENT
%ignore COMMENT
%ignore WS_INLINE
_NL: /(\r?\n[\t ]*)+/